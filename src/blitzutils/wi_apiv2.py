# generated by datamodel-codegen:
#   filename:  WI-API-v2.yaml
#   timestamp: 2023-12-02T17:08:46+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Mapping, Optional, Sequence, Self
from pydantic import AnyUrl, AwareDatetime, ConfigDict, Field

from .replay import ReplayDetail, EnumWinnerTeam, EnumBattleResult
from pyutils import JSONExportable

import logging

# Setup logging
logger = logging.getLogger()
error = logger.error
message = logger.warning
verbose = logger.info
debug = logger.debug


class ChatMessage(JSONExportable):
    model_config = ConfigDict(
        extra="allow",
        populate_by_name=True,
    )
    channel: int
    sender: int
    target: int
    time: float
    cmd: int
    message: str


class GameVersion(JSONExportable):
    model_config = ConfigDict(
        extra="allow",
        populate_by_name=True,
    )
    name: str
    package: str
    created_at: AwareDatetime


class MapEntry(JSONExportable):
    model_config = ConfigDict(
        extra="allow",
        populate_by_name=True,
    )
    map_id: int = Field(..., ge=-2147483648, le=2147483647)
    battle_types: str = Field(..., max_length=64)
    access_codes: str = Field(..., max_length=64, pattern="^\\w+(?:,\\w+)*$")


class PaginatedGameVersionList(JSONExportable):
    model_config = ConfigDict(
        extra="allow",
        populate_by_name=True,
    )
    next: Optional[AnyUrl] = Field(
        None, examples=["http://api.example.org/accounts/?page=4"]
    )
    previous: Optional[AnyUrl] = Field(
        None, examples=["http://api.example.org/accounts/?page=2"]
    )
    results: Optional[Sequence[GameVersion]] = None


class PlatformEnum(int, Enum):
    integer_0 = 0
    integer_1 = 1


class PlayerData(JSONExportable):
    """Class for player specific data in replay files. Was ReplayData in version 1"""

    model_config = ConfigDict(
        extra="allow",
        populate_by_name=True,
    )
    # fmt: off
    # should this be List[Dict[str, int]] instead? 
    achievements        : Sequence[Mapping[str, int]] | None = Field(default=None, alias='a')
    team                : int = Field(default=-1, alias="t")
    name                : str = Field(default="", alias="n")
    base_capture_points	: int | None = Field(default=None, alias='bc')
    base_defend_points	: int | None = Field(default=None, alias='bd')
    chassis_id			: int | None = Field(default=None, alias='ch')
    clan_tag			: str | None = Field(default=None, alias='ct')
    clanid				: int | None = Field(default=None, alias='ci')
    credits				: int | None = Field(default=None, alias='cr')
    damage_assisted		: int | None = Field(default=None, alias='da')
    damage_assisted_track: int | None = Field(default=None, alias='dat')
    damage_blocked		: int | None = Field(default=None, alias='db')
    damage_made			: int | None = Field(default=None, alias='dm')
    damage_received		: int | None = Field(default=None, alias='dr')
    dbid				: int  		 = Field(default=..., alias='id')   # is 'ai' in v1 !!
    death_reason		: int | None = Field(default=None, alias='de')
    distance_travelled	: int | None = Field(default=None, alias='dt')
    enemies_damaged		: int | None = Field(default=None, alias='ed')
    enemies_destroyed	: int | None = Field(default=None, alias='ek')
    enemies_spotted		: int | None = Field(default=None, alias='es')
    entity_id           : int | None = Field(default=None, alias="ei")
    exp					: int | None = Field(default=None, alias='ex')
    exp_for_assist		: int | None = Field(default=None, alias='exa')
    exp_for_damage		: int | None = Field(default=None, alias='exd')
    exp_team_bonus		: int | None = Field(default=None, alias='et')
    gun_id				: int | None = Field(default=None, alias='gi')
    hero_bonus_credits	: int | None = Field(default=None, alias='hc')
    hero_bonus_exp		: int | None = Field(default=None, alias='he')
    hitpoints_left		: int | None = Field(default=None, alias='hl')
    hits_bounced		: int | None = Field(default=None, alias='hb')
    hits_pen			: int | None = Field(default=None, alias='hp')
    hits_received		: int | None = Field(default=None, alias='hr')
    hits_splash			: int | None = Field(default=None, alias='hs')
    killed_by			: int | None = Field(default=None, alias='ki')
    shots_hit			: int | None = Field(default=None, alias='sh')
    shots_made			: int | None = Field(default=None, alias='sm')
    shots_pen			: int | None = Field(default=None, alias='sp')
    shots_splash		: int | None = Field(default=None, alias='ss')
    squad_index			: int | None = Field(default=None, alias='sq')
    time_alive			: int | None = Field(default=None, alias='ta')  # is 't' in v1 !!!!
    turret_id			: int | None = Field(default=None, alias='ti')
    vehicle_descr		: int | None = Field(default=None, alias='vi')
    wp_points_earned	: int | None = Field(default=None, alias='we')
    wp_points_stolen	: int | None = Field(default=None, alias='ws')

    model_config = ConfigDict(extra="allow", frozen=False, validate_assignment=True, populate_by_name=True)

    @classmethod
    def from_ReplayDetail(cls, replay_detail: ReplayDetail) -> Self | None:
        """convert V1 ReplayDetail to V2 PlayerData"""
        try:
            d : dict[str, Any] = replay_detail.model_dump()
            
            # dbid field
            d["id"] = d["ai"]
            del d["ai"]

            # time_alive
            d["ta"] = d["t"]
            del d["t"]

            return cls.model_validate(d)
        except KeyError as err:
            error(f"{err}")  
        return None


class Product(JSONExportable):
    model_config = ConfigDict(
        extra="allow",
        populate_by_name=True,
    )
    sku: str = Field(..., description="Item's id (SKU).", max_length=128)
    localization: str


class Replay(JSONExportable):
    model_config = ConfigDict(
        extra="allow",
        populate_by_name=True,
    )
    # fmt: off
    # id: str
    id              : str = Field(default=..., alias="_id")
    # map_id: int
    map_id          : int               = Field(default=-1, alias="mi")  # not in v1
    # battle_duration: float
    battle_duration : float             = Field(default=..., alias="bd")
    title           : Optional[str]     = Field(default=None, alias="t")
    player_name     : str               = Field(default=..., alias="pn")
    protagonist     : int               = Field(default=..., alias="p")
    vehicle_descr   : int               = Field(default=-1, alias='vi')    # not in v1
    # mastery_badge: int
    mastery_badge   : int | None        = Field(default=None, alias="mb")  # can be None
    # exp_base: int
    exp_base        : int | None        = Field(default=None, alias="eb")  # can be None
    # enemies_spotted     : int
    enemies_spotted : int | None        = Field(default=None, alias='es')  # can be None
    # enemies_destroyed   : int
    enemies_destroyed: int | None       = Field(default=None, alias='ek')  # can be None
    # damage_assisted     : int
    damage_assisted : int | None        = Field(default=None, alias='da')  # can be None
    # damage_made         : int
    damage_made     : int | None        = Field(default=None, alias='dm')  # can be None
    # details_url: AnyUrl
    details_url     : AnyUrl | None     = Field(default=None, alias="deu") # ReplayData.view_url in v1
    # download_url: AnyUrl
    download_url    : AnyUrl | None     = Field(default=None, alias="dlu")
    game_version    : Mapping[str, Any] = Field(default_factory=dict, alias="gv")  # not in v1
    arena_unique_id : str               = Field(default=..., alias="aid") # was 'int' in v1
    download_count  : int               = Field(default=0, alias='dlc')    # not in v1
    data_version    : int               = Field(default=-1, alias='ver')    # not in v1
    private         : Optional[bool]    = Field(default=False, alias="priv") # not in v1
    private_clan    : bool              = Field(default=False, alias="pric") # not in v1
    battle_start_time: AwareDatetime    = Field(alias="bts")                # is 'int' in v1 and has 'str' counterpart
    # upload_time: AwareDatetime
    upload_time     : AwareDatetime | None = Field(default=None, alias="uts") # not in v1
    allies          : Sequence[int]     = Field(default=..., alias="a")
    enemies         : Sequence[int]     = Field(default=..., alias="e")
    # protagonist_clan    : int  
    protagonist_clan: int | None        = Field(default=None, alias='pc') # can be None
    # protagonist_team: int
    protagonist_team: int | None        = Field(default=None, alias="pt")
    # battle_result: int
    battle_result   : EnumBattleResult | None = Field(default=..., alias="br")
    # credits_base: int
    credits_base    : int | None        = Field(default=None, alias="cb")
    tags            : Sequence[int]     = Field(default_factory=list, alias="tgs") # not in v1
    # battle_type   : int
    battle_type     : int | None        = Field(default=None, alias="bt")
    # room_type: int
    room_type       : int | None        = Field(default=None, alias="rt")
    last_accessed_time: AwareDatetime | None = Field(default=None)  # not in v1, not needed
    # winner_team: int
    winner_team     : EnumWinnerTeam | None = Field(default=..., alias="wt")
    finish_reason   : int               = Field(default=-1, alias="ft")  # not in v1, Enum??
    players_data    : Sequence[PlayerData] = Field(default_factory=list, alias="d") # in v1 ReplayDetail | list[ReplayDetail]
    # exp_total: int
    exp_total       : int | None        = Field(default=None, alias="et")
    # credits_total : int
    credits_total   : int | None        = Field(default=None, alias="ct")
    # repair_cost: int
    repair_cost     : int | None        = Field(default=None, alias="rc")
    # exp_free: int
    exp_free        : int | None        = Field(default=None, alias="ef")
    # exp_free_base: int
    exp_free_base   : int | None        = Field(default=None, alias="efb")
    # exp_penalty: int
    exp_penalty     : int | None        = Field(default=None, alias="ep")
    # credits_penalty: int
    credits_penalty : int | None        = Field(default=None, alias="cp")
    # credits_contribution_in: int
    credits_contribution_in: int | None = Field(default=None, alias="cci")
    # credits_contribution_out: int
    credits_contribution_out: int | None= Field(default=None, alias="cco")
    camouflage_id   : int               = Field(default=-1, alias="cid")
    # fmt: off


class ReplayList(JSONExportable):
    model_config = ConfigDict(
        extra="allow",
        populate_by_name=True,
    )
    id: str
    map_id: int
    battle_duration: float
    title: Optional[str] = None
    player_name: str
    protagonist: int
    vehicle_descr: int
    mastery_badge: int
    exp_base: int
    enemies_spotted: int
    enemies_destroyed: int
    damage_assisted: int
    damage_made: int
    details_url: AnyUrl
    download_url: AnyUrl
    game_version: Mapping[str, Any]
    arena_unique_id: str


class ReplayRequest(JSONExportable):
    model_config = ConfigDict(
        extra="allow",
        populate_by_name=True,
    )
    title: Optional[str] = Field(None, min_length=1)
    private: Optional[bool] = False
    upload_url: Optional[AnyUrl] = None
    upload_file: Optional[bytes] = None


class Shot(JSONExportable):
    model_config = ConfigDict(
        extra="allow",
        populate_by_name=True,
    )
    time: float
    shooter: int
    target: int
    has_damage: bool
    shell_id: int
    turret_yaw: float
    gun_pitch: float
    segment: str
    distance: float
    nominal_pen: int
    nominal_damage: int
    damage: int


class BattleDetails(JSONExportable):
    model_config = ConfigDict(
        extra="allow",
        populate_by_name=True,
    )
    id: str
    map_id: int
    battle_type: int
    room_type: int
    data_version: int
    game_version: Mapping[str, Any]
    winner_team: int
    battle_start_time: AwareDatetime
    tier: int
    has_team1: bool
    has_team2: bool
    last_accessed_time: AwareDatetime
    chat: Sequence[ChatMessage]
    shots: Sequence[Shot]
    properties_json: Mapping[str, Any]


class HeatmapSet(JSONExportable):
    model_config = ConfigDict(
        extra="allow",
        populate_by_name=True,
    )
    timestamp: int = Field(..., ge=0, le=4294967295)
    short_description: str
    long_description: str
    package: str = Field(..., max_length=32)
    version: int = Field(..., ge=-2147483648, le=2147483647)
    platform: PlatformEnum
    locked_maps: str = Field(..., max_length=256)


class PaginatedProductList(JSONExportable):
    model_config = ConfigDict(
        extra="allow",
        populate_by_name=True,
    )
    count: Optional[int] = Field(None, examples=[123])
    next: Optional[AnyUrl] = Field(
        None, examples=["http://api.example.org/accounts/?page=4"]
    )
    previous: Optional[AnyUrl] = Field(
        None, examples=["http://api.example.org/accounts/?page=2"]
    )
    results: Optional[Sequence[Product]] = None


class PaginatedReplayListList(JSONExportable):
    model_config = ConfigDict(
        extra="allow",
        populate_by_name=True,
    )
    next: Optional[AnyUrl] = Field(
        None, examples=["http://api.example.org/accounts/?page=4"]
    )
    previous: Optional[AnyUrl] = Field(
        None, examples=["http://api.example.org/accounts/?page=2"]
    )
    results: Optional[Sequence[ReplayList]] = None
